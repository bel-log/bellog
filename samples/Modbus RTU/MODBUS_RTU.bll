{"profileName":"MODBUS RTU","setupVersion":"4","driverType":"Serialport WebSerial","driverSettings":{"baudRate":19200,"dataBits":8,"stopBits":2,"parity":"none","bufferSize":255,"flowControl":"none"},"html":[{"id":1,"name":"MODBUS GENERIC PACKET","code":"<div class=\"notification is-primary is-light\" style=\"margin-bottom: 0.50em\">\n  <p class=\"heading\" style=\"position: absolute; bottom: 1rem; right: 1rem;\">${$$isTx}</button>\n  <div class=\"level\">\n     <div class=\"level-right\">\n        <div>\n          <div>\n            <p class=\"heading\">Slave Address</p>\n            <p class=\"subtitle is-6\">${$$slaveaddr}</p>\n          </div>\n        </div>\n        <div class=\"ml-4\">\n          <div>\n            <p class=\"heading\">Function Code</p>\n              <p class=\"subtitle is-6\">${$$funcode}</p>\n          </div>\n        </div>\n      </div>\n  </div>\n  <p class=\"heading\">Data</p>\n  <div>${$$data}</div>\n</div>","parameters":{"isTx":{"type":"text","default":"isTx"},"slaveaddr":{"type":"text","default":"slaveaddr"},"funcode":{"type":"text","default":"funcode"},"data":{"type":"text","default":"data"}},"events":{}},{"id":2,"name":"MODBUS READ HOLDING REGISTER","code":"<div class=\"notification is-secondary is-light\" style=\"margin-bottom: 0.50em; background-color: #ffe9c5\">\n  <p class=\"heading\" style=\"position: absolute; bottom: 1rem; right: 1rem;\">${$$isTx}</button>\n  <p class=\"heading\" style=\"position: absolute; top: 1rem; right: 1rem;\">Read Holding Registers</button>\n  <div class=\"level\">\n     <div  class=\"level-left\">\n        <div>\n          <div>\n            <p class=\"heading\">Slave Address</p>\n            <p class=\"subtitle is-6\">${$$slaveaddr}</p>\n          </div>\n        </div>\n        <div class=\"ml-4\">\n          <div>\n            <p class=\"heading\">Function Code</p>\n              <p class=\"subtitle is-6\">${$$funcode}</p>\n          </div>\n        </div>\n        <div class=\"ml-4\">\n          <div>\n            <p class=\"heading\">Register Quantity</p>\n              <p class=\"subtitle is-6\">${$$registernum}</p>\n          </div>\n        </div>\n      </div>\n  </div>\n  <p class=\"heading\">Data</p>\n  <div>${$$data}</div>\n</div>","parameters":{"isTx":{"type":"text","default":"isTx"},"slaveaddr":{"type":"text","default":"slaveaddr"},"funcode":{"type":"text","default":"funcode"},"registernum":{"type":"text","default":"registernum"},"data":{"type":"text","default":"data"}},"events":{}},{"id":3,"name":"Poll Read Button","code":"<button class='button is-primary mt-2' onClick=\"pollReadReq()\">${$$text}</button>","parameters":{"text":{"type":"text","default":"text"}},"events":{}}],"actions":[{"id":2,"name":"Send Read Hold Reg","builderType":"CustomBuilder","builderCustomID":2,"builderBindingType":"Gui","builderBindings":{"bindings":{"slaveAddress":{"fixed":true,"value":"1"},"funcCode":{"fixed":true,"value":"3"},"data":{"fixed":true,"value":"0000000A"}}}}],"parsers":[{"id":2,"name":"MODBUS RTU PARSER","code":"\nfunction(accumulator, data, onAccept, onRefuse, info) {\n  // This is an example line parser. captures each sequence with terminating \\n or \\r\n  // accumulator: use it to accumulate state of the parser then return it\n  // data: Uin8tArray of received data\n  // info: {isTx: boolean, time: string, driverName: string}\n  // onAccept(string, args): call this callback when accumulator is ready and has a valid sequence\n  // onRefuse(string, args): all this to refuse the sequence. Content may be displayed anyway according to view configuration\n  if (typeof data === \"string\") {\n    // Clipboard driver\n    data = hexToBytes(data.replace(/\\s/g, '').trim())\n  }\n  const unixTimeZero = info.time ? Date.parse(info.time) : 0;\n  \n  let _accumulator = (accumulator === null || accumulator === undefined) ? {\n    pktTx: [],\n    pktRx: [],\n    timeoutTickTx: 0,\n    timeoutTickRx: 0\n  } : accumulator;\n  if(info.isTx) {\n    for (let i = 0; i < data.length; i++) {\n      _accumulator.pktTx.push(data[i])\n      if(_accumulator.timeoutTickTx === 0) {\n        _accumulator.timeoutTickTx = unixTimeZero\n      }\n      if (_accumulator.pktTx.length > 5) {\n        const modbusPacket = modbusParseAndValidate(_accumulator.pktTx, info.isTx)\n        if(modbusPacket) {\n          onAccept(modbusPacket, info);\n          _accumulator.pktTx = []\n          _accumulator.timeoutTickTx = 0\n        }\n      }\n    }\n\n    if(_accumulator.pktTx.length > 0 &&\n       (unixTimeZero - _accumulator.timeoutTickTx) > 400) {\n      // 400ms timeout\n      onRefuse({evt: \"Timeout Error\"}, info);\n      _accumulator.pktTx = []\n      _accumulator.timeoutTickTx = unixTimeZero\n    }\n  }\n  else {\n    for (let i = 0; i < data.length; i++) {\n      _accumulator.pktRx.push(data[i])\n      if(_accumulator.timeoutTickRx === 0) {\n        _accumulator.timeoutTickRx = unixTimeZero\n      }\n      if (_accumulator.pktRx.length > 5) {\n        const modbusPacket = modbusParseAndValidate(_accumulator.pktRx, info.isTx)\n        if(modbusPacket) {\n          onAccept(modbusPacket, info);\n          _accumulator.pktRx = []\n          _accumulator.timeoutTickRx = 0\n        }\n      }\n    }\n\n    if(_accumulator.pktRx.length > 0 &&\n       (unixTimeZero - _accumulator.timeoutTickRx) > 400) {\n      // 400ms timeout\n      onRefuse({evt: \"Timeout Error\"}, info);\n      _accumulator.pktRx = []\n      _accumulator.timeoutTickRx = unixTimeZero\n    }\n  }\n  return _accumulator;\n}"}],"builders":[{"id":2,"name":"MODBUS RTU BUILDER","code":"function() {\n  // List all argument required to create a packet to send\n  // Bus address, data payload, command code etc\n  const builderArgs = {\n    slaveAddress: \"\",\n    funcCode: \"\",\n    data: \"\"\n  }\n\n  function builderFunc(args) {\n    // This function will be called to build a packet to send\n    // Call sendFunc to set the data to send. Can be either a string or Uint8Array\n    function hexToBytes(hex) {\n        for (var bytes = [], c = 0; c < hex.length; c += 2)\n            bytes.push(parseInt(hex.substr(c, 2), 16));\n        return bytes;\n    }\n    var payload = hexToBytes(args.data)\n    return modbusBuildPacket(args.slaveAddress, args.funcCode, payload)\n  }  \n\n  return [builderArgs, builderFunc];\n}"}],"scripts":[{"id":1,"name":"helper.js","code":"// Convert a hex string to a byte array\nfunction hexToBytes(hex) {\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n}\n\nfunction crc16(data, offset, length) {\n    if (data == null || offset < 0 || offset > data.length - 1 || offset + length > data.length) {\n        return 0;\n    }\n\n    crc = 0xFFFF;\n    for (i = 0; i < length; ++i) {\n        crc ^= data[offset + i] << 8;\n        for (j = 0; j < 8; ++j) {\n            crc = (crc & 0x8000) > 0 ? (crc << 1) ^ 0x1021 : crc << 1;\n        }\n    }\n    return crc & 0xFFFF;\n}\n\n\n\n"},{"id":4,"name":"modbus.js","code":"function calculateCRC(data) {\n    let crc = 0xFFFF;\n    for (let i = 0; i < data.length; i++) {\n        crc ^= data[i];\n        for (let j = 0; j < 8; j++) {\n            if (crc & 1) {\n                crc = (crc >> 1) ^ 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    return crc;\n}\n\nfunction modbusParseAndValidate(dataArray, isTx) {\n    // Ensure the packet is at least long enough to contain address, function code, and CRC\n    if (dataArray.length < 5) {\n        return null;\n    }\n\n    // Calculate the CRC of the received data\n    const receivedCRC = (dataArray[dataArray.length - 2] | (dataArray[dataArray.length - 1] << 8));\n    const calculatedCRC = calculateCRC(dataArray.slice(0, -2));\n\n    // Validate the CRC\n    if (receivedCRC !== calculatedCRC) {\n        return null;\n    }\n\n    // Parse the packet\n    const slaveAddress = dataArray[0];\n    const functionCode = dataArray[1];\n    const dataLength = dataArray.length - 4; // Subtracting address, function code, and CRC\n    const data = dataArray.slice(2, -2); // Extract data array\n\n    return {\n        evt: \"pkt\",\n        slaveAddress: slaveAddress,\n        functionCode: functionCode,\n        dataLength: dataLength,\n        isTx: isTx,\n        data: data\n    };\n}\n\nfunction modbusBuildPacket(slaveAddress, funcCode, data) {\n    if (typeof slaveAddress !== 'number') {\n        slaveAddress = parseInt(slaveAddress)\n    }\n  \n    if (typeof funcCode !== 'number') {\n        funcCode = parseInt(funcCode)\n    }\n    // Create a new array with the size of address + function code + data + CRC (2 bytes)\n    const packetLength = 2 + data.length + 2;\n    const packet = new Uint8Array(packetLength);\n\n    // Set slave address and function code\n    packet[0] = slaveAddress;\n    packet[1] = funcCode;\n\n    // Set data\n    packet.set(data, 2);\n\n    // Calculate CRC\n    const crc = calculateCRC(packet.slice(0, -2));\n\n    // Set CRC\n    packet[packet.length - 2] = crc & 0xFF; // Low byte\n    packet[packet.length - 1] = (crc >> 8) & 0xFF; // High byte\n\n    return packet;\n}"},{"id":5,"name":"globals.js","code":"var timerID = -1\n\ndocument.addEventListener('bellog:DriverOpened', function(e) {\n  console.log(\"Reiceived event bellog:DriverOpened\")\n  if(timerID !== -1)\n    clearInterval(timerID)\n});\n\ndocument.addEventListener('bellog:DriverClosed', function(e) {\n  console.log(\"Reiceived event bellog:DriverClosed\")\n  if(timerID !== -1)\n    clearInterval(timerID)\n});\n\nfunction pollReadReq()\n{\n  if(timerID !== -1)\n    clearInterval(timerID)\n  timerID = setInterval(function() {\n    bellog.buildAndSend(\"MODBUS RTU BUILDER\", {slaveAddress: 1, funcCode: 3, data: \"0000000A\"})\n  }, 1000) // 1s    \n}"}],"styles":[],"views":[{"id":1,"name":"Main","parserType":"CustomParser","customParserID":2,"parserSettings":{},"matchers":[{"id":5,"name":"Match Read Holding Registers","disabled":false,"resolver":"ObjectCompare","resolverParam":{"code":"function customObjectCompare(state, parsedData) {\n  // state: can be set to keep persistent state between compares.\n  // parsedData: string or object according to parser usage\n  // retrun an object with key pair of items to render and result status\n  // keys must always be present when the function returns\n  if(parsedData && parsedData.functionCode === 3) {\n    const hex = num => \"0x\" + (num).toString(16).toUpperCase().padStart(2, '0')\n    if (parsedData.evt === \"pkt\")\n      return {\n        result: true,\n        data: {\n          slaveAddress: hex(parsedData.slaveAddress),\n          functionCode: hex(parsedData.functionCode),\n          isTx: parsedData.isTx ? \"Transmitted\" : \"Received\",\n          registerNum: hex(parsedData.data[0]),\n          data: parsedData.data.splice(1).map((it) => hex(it)).join(\" \")\n        }\n      };\n  }\n\n  // Dummy result is used why setup for previewing available html bindings\n  return {\n    result: false,\n    data: {\n      slaveAddress: \"\",\n      isTx: \"\",\n      functionCode: \"\",\n      registerNum: \"\",\n      data: \"\",\n    }\n  };\n}"},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":true,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":9,"htmlComponentType":"Custom","htmlCustomID":2,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"isTx":{"fixed":false,"value":"isTx","item":"isTx"},"slaveaddr":{"fixed":false,"value":"slaveaddr","item":"slaveAddress"},"funcode":{"fixed":false,"value":"funcode","item":"functionCode"},"registernum":{"fixed":false,"value":"registernum","item":"registerNum"},"data":{"fixed":false,"value":"data","item":"data"}}}},{"id":4,"name":"Match Generic Modbus","disabled":false,"resolver":"ObjectCompare","resolverParam":{"code":"function customObjectCompare(state, parsedData) {\n  // state: can be set to keep persistent state between compares.\n  // parsedData: string or object according to parser usage\n  // retrun an object with key pair of items to render and result status\n  // keys must always be present when the function returns\n  if(parsedData) {\n    const hex = num => \"0x\" + (num).toString(16).toUpperCase().padStart(2, '0')\n    if (parsedData.evt === \"pkt\")\n      return {\n        result: true,\n        data: {\n          slaveAddress: hex(parsedData.slaveAddress),\n          functionCode: hex(parsedData.functionCode),\n          isTx: parsedData.isTx ? \"Transmitted\" : \"Received\",\n          data: parsedData.data.map((it) => hex(it)).join(\" \")\n        }\n      };\n  }\n\n  // Dummy result is used why setup for previewing available html bindings\n  return {\n    result: false,\n    data: {\n      slaveAddress: \"\",\n      isTx: \"\",\n      functionCode: \"\",\n      data: \"\",\n    }\n  };\n}"},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":true,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":9,"htmlComponentType":"Custom","htmlCustomID":1,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"isTx":{"fixed":false,"value":"isTx","item":"isTx"},"slaveaddr":{"fixed":false,"value":"slaveaddr","item":"slaveAddress"},"funcode":{"fixed":false,"value":"funcode","item":"functionCode"},"data":{"fixed":false,"value":"data","item":"data"}}}},{"id":1,"name":"All Rx","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":false,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Div","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#000000","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}},{"id":2,"name":"All Tx","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":true,"received":false,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Div","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#7ed3ff","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}},{"id":3,"name":"All Refused","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":true,"consumeMatch":true,"transmitted":true,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Div","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#FF0000","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}}],"widgetFrameSize":30,"widgetGroupIds":[{"id":1}],"autoWrap":true},{"id":2,"name":"Raw","parserType":"RawParser","customParserID":0,"parserSettings":{},"matchers":[{"id":1,"name":"All Rx","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":false,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"DivWithTimestamp","htmlCustomID":0,"htmlComponentBindingType":"Code","htmlComponentBindings":{"code":"function applyObjectToHtml(state, resolvedParsedData) {\n  // available resolvedParsedData keys: All\n  return {\n    color: \"#000000\",\n    content: \"Rx: \" + resolvedParsedData[\"All\"]\n  }\n}"}},{"id":2,"name":"All Tx","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":true,"received":false,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"DivWithTimestamp","htmlCustomID":0,"htmlComponentBindingType":"Code","htmlComponentBindings":{"code":"function applyObjectToHtml(state, resolvedParsedData) {\n  // available resolvedParsedData keys: All\n  return {\n    color: \"#000000\",\n    content: \"Tx: \" + resolvedParsedData[\"All\"]\n  }\n}"}},{"id":3,"name":"All Refused","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":true,"consumeMatch":true,"transmitted":true,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Span","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#FF0000","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}}],"widgetFrameSize":30,"widgetGroupIds":[],"autoWrap":true}],"widgetGroups":[{"id":1,"name":"Read First 10 Holding Registers","widgets":[{"id":9,"name":"Send Read","disabled":false,"htmlComponentType":"Button","htmlCustomID":0,"bindings":{"text":{"value":"Send Read Req"}},"actions":{"buttonClick":{"htmlEventKey":"buttonClick","actionID":2}}},{"id":10,"name":"Poll Read Button","disabled":false,"htmlComponentType":"Custom","htmlCustomID":3,"bindings":{"text":{"value":"Poll Read Reg"}},"actions":{}}]}],"globalSettings":{"shareDataBetweenViews":true,"maximumItemsPerView":10000}}