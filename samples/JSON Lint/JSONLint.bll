{"profileName":"JSONLint","setupVersion":"4","driverType":"Clipboard","driverSettings":{},"html":[{"id":1,"name":"JsonDiv","code":"<div class=\"m-1\">\n  <div class=\"jsonDiv-content p-1\">\n    ${$$content}\n  </div>\n  <div>\n    ${$$result}\n  </div>\n</div>\n","parameters":{"content":{"type":"text","default":"content"},"result":{"type":"text","default":"result"}},"events":{}}],"actions":[],"parsers":[],"builders":[],"scripts":[{"id":1,"name":"json-format-highlight.js","code":"\n/*\nhttps://github.com/luyilin/json-format-highlight\nThe MIT License (MIT)\n\nCopyright (c) luyilin <luyilin12@gmail.com> (https://github.com/luyilin)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n  const entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n  \n  function escapeHtml (html) {\n    return String(html).replace(/[&<>\"'`=]/g, function (s) {\n        return entityMap[s];\n    });\n  }\n  \nfunction jsonHighlight(json, colorOptions = {}) {\n\n  const defaultColors = {\n    keyColor: 'dimgray',\n    numberColor: 'lightskyblue',\n    stringColor: 'lightcoral',\n    trueColor: 'lightseagreen',\n    falseColor: '#f66578',\n    nullColor: 'cornflowerblue'\n  }\n  const valueType = typeof json\n  if (valueType !== 'string') {\n    json = JSON.stringify(json, null, 2) || valueType\n  }\n  let colors = Object.assign({}, defaultColors, colorOptions)\n  json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>')\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+]?\\d+)?)/g, (match) => {\n    let color = colors.numberColor\n    let style = ''\n    if (/^\"/.test(match)) {\n      if (/:$/.test(match)) {\n        color = colors.keyColor\n      } else {\n        color = colors.stringColor;\n        match = '\"' + escapeHtml(match.substr(1, match.length - 2)) + '\"';\n        style = 'word-wrap:break-word;white-space:pre-wrap;';\n      }\n    } else {\n      color = /true/.test(match)\n        ? colors.trueColor\n        : /false/.test(match)\n          ? colors.falseColor\n          : /null/.test(match)\n            ? colors.nullColor\n            : color\n    }\n    return `<span style=\"${style}color:${color}\">${match}</span>`\n  })\n}"}],"styles":[{"id":1,"name":"JSON.css","code":".jsonDiv-content \n{ \n  height: 100%;\n  background: #cce6ff;\n  white-space: pre-wrap;\n}"}],"views":[{"id":1,"name":"JsonLint","parserType":"RawParser","customParserID":0,"parserSettings":{},"matchers":[{"id":1,"name":"All Rx","disabled":false,"resolver":"ObjectCompare","resolverParam":{"code":"function customObjectCompare(state, parsedData, info) {\n  // state: can be set to keep persistent state between compares.\n  // parsedData: string or object according to parser usage\n  // info: {isTx: boolean, driverName: string}\n  // retrun an object with key pair of items to render and result status\n  // keys must always be present when the function returns\n  if(parsedData) {\n    var jsonObj = null\n    var exp = null\n    try {\n      jsonObj = JSON.parse(parsedData)\n    } catch(ex) {\n      exp = ex.message\n    }\n    return {\n      result: true,\n      data: {\n        originalData: escapeHtml(parsedData),\n        jsonObj: jsonObj === null ? \"\" : jsonObj,\n        error: exp === null ? \"\" : exp\n      }\n    }\n  }\n  // Dummy result is used by setup for previewing available html bindings\n  return {\n    result: false,\n    data: {\n      originalData: \"\",\n      jsonObj: \"\",\n      error: \"\"\n    }\n  }\n}"},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":false,"received":true,"widgetMode":false,"safeHtml":false,"widgetID":0,"htmlComponentType":"Custom","htmlCustomID":1,"htmlComponentBindingType":"Code","htmlComponentBindings":{"code":"function applyObjectToHtml(state, resolvedParsedData) {\n  // available resolvedParsedData keys: jsonObj originalData error\n  return {\n    content: resolvedParsedData[\"error\"] === \"\" ? \n      jsonHighlight(resolvedParsedData[\"jsonObj\"]) : \n      resolvedParsedData[\"originalData\"],\n    result: resolvedParsedData[\"error\"]\n  }\n}"}},{"id":2,"name":"All Tx","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":true,"received":false,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Div","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#7ed3ff","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}},{"id":3,"name":"All Refused","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":true,"refused":true,"consumeMatch":true,"transmitted":true,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Div","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#FF0000","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}}],"widgetFrameSize":30,"widgetGroupIds":[],"autoWrap":true}],"widgetGroups":[],"globalSettings":{"shareDataBetweenViews":true,"maximumItemsPerView":10000}}