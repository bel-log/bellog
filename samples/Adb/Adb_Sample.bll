{"profileName":"AdbTest","setupVersion":"4","driverType":"Adb Logcat","driverSettings":{"clearLogAtConnection":true},"html":[{"id":1,"name":"AdbItem","code":"<div class=\"row\">\n  <div class=\"date\">${$$date}</div>\n  <div class=\"pid\">\n    ${$$pid} - ${$$tid}\n  </div>\n  <div class=\"_${$$tag}\" style=\"background-color: ${getColorGivenTag($$tag)}\">${$$tag}</div>\n  <div style=\"background-color: ${getColorPriority($$priority)}\">${$$priority}</div>\n  <div style=\"color: ${getMessageTextColor($$priority)}\">${$$message}</div>\n</div>","parameters":{"date":{"type":"text","default":"date"},"pid":{"type":"text","default":"pid"},"tid":{"type":"text","default":"tid"},"tag":{"type":"text","default":"tag"},"priority":{"type":"text","default":"priority"},"message":{"type":"text","default":"message"}},"events":{}},{"id":2,"name":"Filter","code":"<div>\n  <input id=\"filterInput\" class=\"input mb-2\" type=\"text\" placeholder=\"Filter tags\">\n  <button class=\"button is-primary\" onClick=\"execFilter()\">${$$text}</button>\n</div>","parameters":{"text":{"type":"text","default":"text"}},"events":{}}],"actions":[],"parsers":[],"builders":[],"scripts":[{"id":2,"name":"colorChooser.js","code":"function getColorPriority(priority) {\n  if(priority.trim() == \"V\")\n    return \"#f0f7f3\"\n  if(priority.trim() == \"D\")\n    return \"#d5f0e0\"\n  if(priority.trim() == \"I\")\n    return \"#c7e5ff\"\n  if(priority.trim() == \"I\")\n    return \"#f9fade\"\n  if(priority.trim() == \"E\")\n    return \"#ff9791\"\n  if(priority.trim() == \"F\")\n    return \"#fa867f\"\n  return \"#fa867f\"\n}\n\nvar colorMap = {}\nfunction getColorGivenTag(tag) {\n  if(colorMap[tag])\n    return colorMap[tag]\n    const red = Math.floor(Math.random() * 255)\n    const green = Math.floor(Math.random() * 255)\n    const blue = Math.floor(Math.random() * 255)\n    const opacity = 0.2\n    const str = `rgba(${red}, ${green}, ${blue}, ${opacity})`\n    colorMap[tag] = str\n    return str\n}\n\nfunction getMessageTextColor(priority) {\n  if(priority.trim() == \"E\")\n    return \"red\"\n  if(priority.trim() == \"F\")\n    return \"red\"\n  return \"black\"\n}"},{"id":3,"name":"JsonHighlight.js","code":"/*\nhttps://github.com/luyilin/json-format-highlight\nThe MIT License (MIT)\n\nCopyright (c) luyilin <luyilin12@gmail.com> (https://github.com/luyilin)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nfunction jsonHighlight(json, colorOptions = {}) {\n\n  const defaultColors = {\n    keyColor: 'dimgray',\n    numberColor: 'lightskyblue',\n    stringColor: 'lightcoral',\n    trueColor: 'lightseagreen',\n    falseColor: '#f66578',\n    nullColor: 'cornflowerblue'\n  }\n  \n  const entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n  \n  function escapeHtml (html) {\n    return String(html).replace(/[&<>\"'`=]/g, function (s) {\n        return entityMap[s];\n    });\n  }\n  \n  const valueType = typeof json\n  if (valueType !== 'string') {\n    json = JSON.stringify(json, null, 2) || valueType\n  }\n  let colors = Object.assign({}, defaultColors, colorOptions)\n  json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>')\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+]?\\d+)?)/g, (match) => {\n    let color = colors.numberColor\n    let style = ''\n    if (/^\"/.test(match)) {\n      if (/:$/.test(match)) {\n        color = colors.keyColor\n      } else {\n        color = colors.stringColor;\n        match = '\"' + escapeHtml(match.substr(1, match.length - 2)) + '\"';\n        style = 'word-wrap:break-word;white-space:pre-wrap;';\n      }\n    } else {\n      color = /true/.test(match)\n        ? colors.trueColor\n        : /false/.test(match)\n          ? colors.falseColor\n          : /null/.test(match)\n            ? colors.nullColor\n            : color\n    }\n    return `<span style=\"${style}color:${color}\">${match}</span>`\n  })\n}"},{"id":4,"name":"helpers.js","code":"// Note: This regex matches even invalid JSON strings, but since we’re\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we don’t care since the output would be invalid anyway).\nconst stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,]/g;\n\nfunction stringify(passedObj, options = {}) {\n  const indent = JSON.stringify(\n    [1],\n    undefined,\n    options.indent === undefined ? 2 : options.indent\n  ).slice(2, -3);\n\n  const maxLength =\n    indent === \"\"\n      ? Infinity\n      : options.maxLength === undefined\n      ? 80\n      : options.maxLength;\n\n  let { replacer } = options;\n\n  return (function _stringify(obj, currentIndent, reserved) {\n    if (obj && typeof obj.toJSON === \"function\") {\n      obj = obj.toJSON();\n    }\n\n    const string = JSON.stringify(obj, replacer);\n\n    if (string === undefined) {\n      return string;\n    }\n\n    const length = maxLength - currentIndent.length - reserved;\n\n    if (string.length <= length) {\n      const prettified = string.replace(\n        stringOrChar,\n        (match, stringLiteral) => {\n          return stringLiteral || `${match} `;\n        }\n      );\n      if (prettified.length <= length) {\n        return prettified;\n      }\n    }\n\n    if (replacer != null) {\n      obj = JSON.parse(string);\n      replacer = undefined;\n    }\n\n    if (typeof obj === \"object\" && obj !== null) {\n      const nextIndent = currentIndent + indent;\n      const items = [];\n      let index = 0;\n      let start;\n      let end;\n\n      if (Array.isArray(obj)) {\n        start = \"[\";\n        end = \"]\";\n        const { length } = obj;\n        for (; index < length; index++) {\n          items.push(\n            _stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) ||\n              \"null\"\n          );\n        }\n      } else {\n        start = \"{\";\n        end = \"}\";\n        const keys = Object.keys(obj);\n        const { length } = keys;\n        for (; index < length; index++) {\n          const key = keys[index];\n          const keyPart = `${JSON.stringify(key)}: `;\n          const value = _stringify(\n            obj[key],\n            nextIndent,\n            keyPart.length + (index === length - 1 ? 0 : 1)\n          );\n          if (value !== undefined) {\n            items.push(keyPart + value);\n          }\n        }\n      }\n\n      if (items.length > 0) {\n        return [start, indent + items.join(`,\\n${nextIndent}`), end].join(\n          `\\n${currentIndent}`\n        );\n      }\n    }\n\n    return string;\n  })(passedObj, \"\", 0);\n}"},{"id":5,"name":"Filter.js","code":"function execFilter(e) {\n    let filterInput = document.getElementById(\"filterInput\");\n\n    let stylesa = document.head.getElementsByTagName(\"style\")\n    for (let i = 0; i < stylesa.length; i++) {\n        if (stylesa[i].id === \"__filter_css\") {\n            document.head.removeChild(stylesa[i])\n            break\n        }\n    }\n\n    if (filterInput.length <= 0)\n        return;\n    let stylecss = `#Logcat_log .row:not(:has([class^=\"${\"_\" + filterInput.value}\"])) {\n    display: none;\n    }`\n    let style = document.createElement('style');\n    style.id = \"__filter_css\"\n    style.innerHTML = stylecss\n    document.head.appendChild(style)\n}"}],"styles":[{"id":1,"name":"adb.css","code":".row {\n\n  display: table-row;\n\n}\n\n.row div {\n\n  display: table-cell;\n\n  border: 1px solid grey;\n\n  padding: 8px;\n}\n\n.date {\n  background-color: #e3f5ff;\n}\n\n.pid {\n  background-color: #d3d8db;\n}"}],"views":[{"id":1,"name":"Logcat","parserType":"LineParser","customParserID":0,"parserSettings":{},"matchers":[{"id":1,"name":"All Rx","disabled":false,"resolver":"Regex","resolverParam":{"regex":"^(?<timestamp>\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}.\\d{3})\\s+(?<pid>\\d+)\\s+(?<tid>\\d+)\\s+(?<priority>[A-Z])\\s+(?<tag>[^:]*):\\s+(.*)$"},"accepted":true,"refused":false,"consumeMatch":true,"transmitted":false,"received":true,"widgetMode":false,"safeHtml":false,"widgetID":0,"htmlComponentType":"Custom","htmlCustomID":1,"htmlComponentBindingType":"Code","htmlComponentBindings":{"code":"function applyObjectToHtml(state, resolvedParsedData) {\n  // resolvedParsedData is the array of the regex result. item 0 is the whole line matches.\n  // items 1..n are the capturing group matches.\n  // ex. regex \"hello (.*)\" on \"Hello Mark\"\n  // resolvedParsedData['All'] -> Hello Mark\n  // resolvedParsedData['Group 1'] -> Mark\n  // available resolvedParsedData keys: All Group 1 Group 2 Group 3 Group 4 Group 5 Group 6\n\n  let message = \"\"\n  try {\n    const obj = JSON.parse(resolvedParsedData[\"Group 6\"])\n    message = jsonHighlight(stringify(obj))\n  } catch (ex) {\n    message = resolvedParsedData[\"Group 6\"]\n  }\n  \n  return {\n    date: resolvedParsedData[\"Group 1\"],\n    pid: resolvedParsedData[\"Group 2\"],\n    tid: resolvedParsedData[\"Group 3\"],\n    tag: resolvedParsedData[\"Group 5\"],\n    priority: resolvedParsedData[\"Group 4\"],\n    message: message\n  }\n}"}},{"id":3,"name":"All Refused","disabled":false,"resolver":"Any","resolverParam":{"text":""},"accepted":false,"refused":true,"consumeMatch":true,"transmitted":true,"received":true,"widgetMode":false,"safeHtml":true,"widgetID":0,"htmlComponentType":"Div","htmlCustomID":0,"htmlComponentBindingType":"Gui","htmlComponentBindings":{"bindings":{"color":{"fixed":true,"value":"#FF0000","item":"All"},"content":{"fixed":false,"value":"","item":"All"}}}}],"widgetFrameSize":10,"widgetGroupIds":[{"id":1}],"autoWrap":true}],"widgetGroups":[{"id":1,"name":"Filter","widgets":[{"id":1,"name":"Filter","disabled":false,"htmlComponentType":"Custom","htmlCustomID":2,"bindings":{"text":{"value":"text"}},"actions":{}}]}],"globalSettings":{"shareDataBetweenViews":true,"maximumItemsPerView":10000}}